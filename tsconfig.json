{
  "compilerOptions": {
    "paths": {
      "~/*": ["./src/*"]
    },
    "baseUrl": "./src",
    /* 기본 옵션 */
    "incremental": true /* 증분 컴파일 활성화 */,
    "target": "es2016" /* ECMAScript 목표 버전 설정: 'ES3'(기본), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    "module": "commonjs" /* 생성될 모듈 코드 설정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ] /* 컴파일 과정에 사용될 라이브러리 파일 설정 */,
    "allowJs": true /* 	컴파일 대상에 js파일 포함 여부 */,
    "checkJs": true /* js파일에 오류가 있으면 알려줄것인지 여부 */,
    "jsx": "preserve" /* 생성될 JSX 코드 설정: 'preserve', 'react-native', or 'react'. */,
    "removeComments": true /* 컴파일시 결과물에 주석 삭제 여부 */,
    "noEmit": true /* 오류확인만 진행하고 파일은 생성하지 않음 */,
    "isolatedModules": true /* 각 파일을 별도 모듈로 변환 ('ts.transpileModule'과 유사) */,
    "outDir": "./dist",
    /* 엄격한 유형 검사 옵션 */
    "strict": true /* 모든 엄격한 유형 검사 옵션 활성화 */,
    /* 모듈 분석 옵션 */
    "moduleResolution": "node" /* 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic' (TypeScript pre-1.6). */,
    "esModuleInterop": true /* 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공. 'allowSyntheticDefaultImports' 임시 */,
    "resolveJsonModule": true /* JSON import */,
    /* 고급 옵션 */
    "skipLibCheck": true /* 선언 파일 유형 검사 스킵 */,
    "forceConsistentCasingInFileNames": true /* 동일한 파일에 대한 일관되지 않은 케이스 참조를 허용하지 않음 */,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "src",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
